--- a/src/third_party/WebKit/WebCore/html/HTMLObjectElement.cpp
+++ b/src/third_party/WebKit/WebCore/html/HTMLObjectElement.cpp
@@ -242,13 +242,14 @@ void HTMLObjectElement::renderFallbackCo
         return;
 
     // Before we give up and use fallback content, check to see if this is a MIME type issue.
-    if (m_imageLoader && m_imageLoader->image()) {
+    if (m_imageLoader && m_imageLoader->image() && m_imageLoader->image()->status() != CachedResource::LoadError) {
         m_serviceType = m_imageLoader->image()->response().mimeType();
         if (!isImageType()) {
-            // If we don't think we have an image type anymore, then ditch the image loader.
-            m_imageLoader.clear();        
             detach();
             attach();
+
+            // If we don't think we have an image type anymore, then ditch the image loader.
+            m_imageLoader.clear();
             return;
         }
     }
--- a/src/third_party/WebKit/WebCore/loader/CachedCSSStyleSheet.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedCSSStyleSheet.cpp
@@ -116,10 +116,11 @@ void CachedCSSStyleSheet::checkNotify()
         c->setCSSStyleSheet(m_url, m_response.url(), m_decoder->encoding().name(), this);
 }
 
-void CachedCSSStyleSheet::error()
+void CachedCSSStyleSheet::error(CachedResource::Status status)
 {
+    setStatus(status);
+    ASSERT(errorOccurred());
     setLoading(false);
-    setErrorOccurred(true);
     checkNotify();
 }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedCSSStyleSheet.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedCSSStyleSheet.h
@@ -49,7 +49,7 @@ namespace WebCore {
         virtual void setEncoding(const String&);
         virtual String encoding() const;
         virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-        virtual void error();
+        virtual void error(CachedResource::Status);
 
         virtual bool schedule() const { return true; }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedFont.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedFont.cpp
@@ -111,7 +111,7 @@ bool CachedFont::ensureCustomFontData()
     if (!m_fontData && !errorOccurred() && !isLoading() && m_data) {
         m_fontData = createFontCustomPlatformData(m_data.get());
         if (!m_fontData)
-            setErrorOccurred(true);
+            setStatus(DecodeError);
     }
 #endif
     return m_fontData;
@@ -206,10 +206,11 @@ void CachedFont::checkNotify()
 }
 
 
-void CachedFont::error()
+void CachedFont::error(CachedResource::Status status)
 {
+    setStatus(status);
+    ASSERT(errorOccurred());
     setLoading(false);
-    setErrorOccurred(true);
     checkNotify();
 }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedFont.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedFont.h
@@ -53,7 +53,7 @@ public:
 
     virtual void didAddClient(CachedResourceClient*);
     virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-    virtual void error();
+    virtual void error(CachedResource::Status);
 
     virtual void allClientsRemoved();
 
--- a/src/third_party/WebKit/WebCore/loader/CachedImage.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedImage.cpp
@@ -283,7 +283,7 @@ void CachedImage::data(PassRefPtr<Shared
         IntSize s = imageSize(1.0f);
         size_t estimatedDecodedImageSize = s.width() * s.height() * 4; // no overflow check
         if (m_image->isNull() || (maxDecodedImageSize > 0 && estimatedDecodedImageSize > maxDecodedImageSize)) {
-            error();
+            error(errorOccurred() ? status() : DecodeError);
             if (inCache())
                 cache()->remove(this);
             return;
@@ -303,10 +303,11 @@ void CachedImage::data(PassRefPtr<Shared
     }
 }
 
-void CachedImage::error()
+void CachedImage::error(CachedResource::Status status)
 {
     clear();
-    setErrorOccurred(true);
+    setStatus(status);
+    ASSERT(errorOccurred() || httpStatusCodeErrorOccurred());
     m_data.clear();
     notifyObservers();
     setLoading(false);
--- a/src/third_party/WebKit/WebCore/loader/CachedImage.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedImage.h
@@ -65,11 +65,11 @@ public:
     virtual void destroyDecodedData();
 
     virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-    virtual void error();
+    virtual void error(CachedResource::Status);
     
     virtual void httpStatusCodeError() { m_httpStatusCodeErrorOccurred = true; }
     bool httpStatusCodeErrorOccurred() const { return m_httpStatusCodeErrorOccurred; }
-    
+
     virtual bool schedule() const { return true; }
 
     void checkNotify();
--- a/src/third_party/WebKit/WebCore/loader/CachedResource.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedResource.cpp
@@ -65,7 +65,6 @@ CachedResource::CachedResource(const Str
     , m_inLiveDecodedResourcesList(false)
     , m_requestedFromNetworkingLayer(false)
     , m_sendResourceLoadCallbacks(true)
-    , m_errorOccurred(false)
     , m_inCache(false)
     , m_loading(false)
     , m_type(type)
@@ -430,7 +429,7 @@ void CachedResource::updateResponseAfter
 
 bool CachedResource::canUseCacheValidator() const
 {
-    if (m_loading || m_errorOccurred)
+    if (m_loading || errorOccurred())
         return false;
 
     if (m_response.cacheControlContainsNoStore())
@@ -443,7 +442,7 @@ bool CachedResource::canUseCacheValidato
     
 bool CachedResource::mustRevalidate(CachePolicy cachePolicy) const
 {
-    if (m_errorOccurred)
+    if (errorOccurred())
         return true;
 
     if (m_loading)
--- a/src/third_party/WebKit/WebCore/loader/CachedResource.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedResource.h
@@ -74,7 +74,9 @@ public:
         Unknown,      // let cache decide what to do with it
         New,          // inserting new item
         Pending,      // only partially loaded
-        Cached        // regular case
+        Cached,       // regular case
+        LoadError,
+        DecodeError
     };
 
     CachedResource(const String& url, Type);
@@ -86,8 +88,8 @@ public:
     virtual void setEncoding(const String&) { }
     virtual String encoding() const { return String(); }
     virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-    virtual void error() { }
-    virtual void httpStatusCodeError() { error(); } // Images keep loading in spite of HTTP errors (for legacy compat with <img>, etc.).
+    virtual void error(CachedResource::Status) { }
+    virtual void httpStatusCodeError() { error(LoadError); } // Images keep loading in spite of HTTP errors (for legacy compat with <img>, etc.).
 
     const String &url() const { return m_url; }
     Type type() const { return static_cast<Type>(m_type); }
@@ -177,8 +179,7 @@ public:
     String accept() const { return m_accept; }
     void setAccept(const String& accept) { m_accept = accept; }
 
-    bool errorOccurred() const { return m_errorOccurred; }
-    void setErrorOccurred(bool b) { m_errorOccurred = b; }
+    bool errorOccurred() const { return (status() == LoadError || status() == DecodeError); }
 
     bool sendResourceLoadCallbacks() const { return m_sendResourceLoadCallbacks; }
     
@@ -253,7 +254,6 @@ private:
     bool m_requestedFromNetworkingLayer : 1;
     bool m_sendResourceLoadCallbacks : 1;
 
-    bool m_errorOccurred : 1;
     bool m_inCache : 1;
     bool m_loading : 1;
 
--- a/src/third_party/WebKit/WebCore/loader/CachedScript.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedScript.cpp
@@ -99,10 +99,11 @@ void CachedScript::checkNotify()
         c->notifyFinished(this);
 }
 
-void CachedScript::error()
+void CachedScript::error(CachedResource::Status status)
 {
+    setStatus(status);
+    ASSERT(errorOccurred());
     setLoading(false);
-    setErrorOccurred(true);
     checkNotify();
 }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedScript.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedScript.h
@@ -46,7 +46,7 @@ namespace WebCore {
         virtual void setEncoding(const String&);
         virtual String encoding() const;
         virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-        virtual void error();
+        virtual void error(CachedResource::Status);
 
         virtual bool schedule() const { return false; }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedXSLStyleSheet.cpp
+++ b/src/third_party/WebKit/WebCore/loader/CachedXSLStyleSheet.cpp
@@ -87,10 +87,11 @@ void CachedXSLStyleSheet::checkNotify()
         c->setXSLStyleSheet(m_url, m_response.url(), m_sheet);
 }
 
-void CachedXSLStyleSheet::error()
+void CachedXSLStyleSheet::error(CachedResource::Status status)
 {
+    setStatus(status);
+    ASSERT(errorOccurred());
     setLoading(false);
-    setErrorOccurred(true);
     checkNotify();
 }
 
--- a/src/third_party/WebKit/WebCore/loader/CachedXSLStyleSheet.h
+++ b/src/third_party/WebKit/WebCore/loader/CachedXSLStyleSheet.h
@@ -46,7 +46,7 @@ namespace WebCore {
         virtual void setEncoding(const String&);
         virtual String encoding() const;
         virtual void data(PassRefPtr<SharedBuffer> data, bool allDataReceived);
-        virtual void error();
+        virtual void error(CachedResource::Status);
         
         virtual bool schedule() const { return true; }
         
--- a/src/third_party/WebKit/WebCore/loader/loader.cpp
+++ b/src/third_party/WebKit/WebCore/loader/loader.cpp
@@ -460,7 +460,7 @@ void Loader::Host::didFail(SubresourceLo
 
     if (!cancelled) {
         docLoader->setLoadInProgress(true);
-        resource->error();
+        resource->error(CachedResource::LoadError);
     }
     
     docLoader->setLoadInProgress(false);
@@ -550,7 +550,7 @@ void Loader::Host::didReceiveData(Subres
     
     if (resource->errorOccurred())
         return;
-        
+
     if (resource->response().httpStatusCode() / 100 == 4) {
         // Treat a 4xx response like a network error for all resources but images (which will ignore the error and continue to load for 
         // legacy compatibility).
