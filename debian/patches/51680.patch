--- a/src/chrome/browser/back_forward_menu_model_unittest.cc
+++ b/src/chrome/browser/back_forward_menu_model_unittest.cc
@@ -40,27 +40,23 @@ class BackFwdMenuModelTest : public Rend
   // will be pending after we ask to navigate there).
   void NavigateToOffset(int offset) {
     controller().GoToOffset(offset);
-    const NavigationEntry* entry = controller().pending_entry();
-    rvh()->SendNavigate(entry->page_id(), entry->url());
+    contents()->CommitPendingNavigation();
   }
 
   // Same as NavigateToOffset but goes to an absolute index.
   void NavigateToIndex(int index) {
     controller().GoToIndex(index);
-    const NavigationEntry* entry = controller().pending_entry();
-    rvh()->SendNavigate(entry->page_id(), entry->url());
+    contents()->CommitPendingNavigation();
   }
 
   // Goes back/forward and commits the load.
   void GoBack() {
     controller().GoBack();
-    const NavigationEntry* entry = controller().pending_entry();
-    rvh()->SendNavigate(entry->page_id(), entry->url());
+    contents()->CommitPendingNavigation();
   }
   void GoForward() {
     controller().GoForward();
-    const NavigationEntry* entry = controller().pending_entry();
-    rvh()->SendNavigate(entry->page_id(), entry->url());
+    contents()->CommitPendingNavigation();
   }
 };
 
--- a/src/chrome/browser/tab_contents/navigation_controller_unittest.cc
+++ b/src/chrome/browser/tab_contents/navigation_controller_unittest.cc
@@ -1713,6 +1713,59 @@ TEST_F(NavigationControllerTest, Subfram
   EXPECT_EQ(url2, controller().GetActiveEntry()->url());
 }
 
+// Tests that navigations initiated from the page (with the history object)
+// work as expected without navigation entries.
+TEST_F(NavigationControllerTest, HistoryNavigate) {
+  const GURL url1("http://foo1");
+  const GURL url2("http://foo2");
+  const GURL url3("http://foo3");
+
+  NavigateAndCommit(url1);
+  NavigateAndCommit(url2);
+  NavigateAndCommit(url3);
+  controller().GoBack();
+  contents()->CommitPendingNavigation();
+
+  // Casts the TabContents to a RenderViewHostDelegate::BrowserIntegration so we
+  // can call GoToEntryAtOffset which is private.
+  RenderViewHostDelegate::BrowserIntegration* rvh_delegate =
+      static_cast<RenderViewHostDelegate::BrowserIntegration*>(contents());
+
+  // Simulate the page calling history.back(), it should not create a pending
+  // entry.
+  rvh_delegate->GoToEntryAtOffset(-1);
+  EXPECT_EQ(-1, controller().pending_entry_index());
+  // The actual cross-navigation is suspended until the current RVH tells us
+  // it unloaded, simulate that.
+  contents()->ProceedWithCrossSiteNavigation();
+  // Also make sure we told the page to navigate.
+  const IPC::Message* message =
+      process()->sink().GetFirstMessageMatching(ViewMsg_Navigate::ID);
+  ASSERT_TRUE(message != NULL);
+  Tuple1<ViewMsg_Navigate_Params> nav_params;
+  ViewMsg_Navigate::Read(message, &nav_params);
+  EXPECT_EQ(url1, nav_params.a.url);
+  process()->sink().ClearMessages();
+
+  // Now test history.forward()
+  rvh_delegate->GoToEntryAtOffset(1);
+  EXPECT_EQ(-1, controller().pending_entry_index());
+  // The actual cross-navigation is suspended until the current RVH tells us
+  // it unloaded, simulate that.
+  contents()->ProceedWithCrossSiteNavigation();
+  message = process()->sink().GetFirstMessageMatching(ViewMsg_Navigate::ID);
+  ASSERT_TRUE(message != NULL);
+  ViewMsg_Navigate::Read(message, &nav_params);
+  EXPECT_EQ(url3, nav_params.a.url);
+  process()->sink().ClearMessages();
+
+  // Make sure an extravagant history.go() doesn't break.
+  rvh_delegate->GoToEntryAtOffset(120);  // Out of bounds.
+  EXPECT_EQ(-1, controller().pending_entry_index());
+  message = process()->sink().GetFirstMessageMatching(ViewMsg_Navigate::ID);
+  EXPECT_TRUE(message == NULL);
+}
+
 /* TODO(brettw) These test pass on my local machine but fail on the XP buildbot
    (but not Vista) cleaning up the directory after they run.
    This should be fixed.
--- a/src/chrome/browser/tab_contents/render_view_host_manager_unittest.cc
+++ b/src/chrome/browser/tab_contents/render_view_host_manager_unittest.cc
@@ -8,6 +8,7 @@
 #include "chrome/browser/tab_contents/navigation_entry.h"
 #include "chrome/browser/tab_contents/render_view_host_manager.h"
 #include "chrome/common/render_messages.h"
+#include "chrome/common/render_messages_params.h"
 #include "chrome/common/url_constants.h"
 #include "chrome/test/test_notification_tracker.h"
 #include "ipc/ipc_message.h"
@@ -291,3 +292,49 @@ TEST_F(RenderViewHostManagerTest, NonDOM
 
   EXPECT_TRUE(ShouldSwapProcesses(&manager, &ntp_entry, &about_entry));
 }
+
+// Tests that we don't end up in an inconsistent state if a page does a back and
+// then reload. http://crbug.com/51680
+TEST_F(RenderViewHostManagerTest, PageDoesBackAndReload) {
+  GURL url1("http://www.google.com/");
+  GURL url2("http://www.evil-site.com/");
+
+  // Navigate to a safe site, then an evil site.
+  contents()->NavigateAndCommit(url1);
+  RenderViewHost* host1 = contents()->render_view_host();
+  contents()->NavigateAndCommit(url2);
+  RenderViewHost* host2 = contents()->render_view_host();
+  // We should have got a new RVH for the evil site.
+  EXPECT_NE(host1, host2);
+
+  // Casts the TabContents to a RenderViewHostDelegate::BrowserIntegration so we
+  // can call GoToEntryAtOffset which is private.
+  RenderViewHostDelegate::BrowserIntegration* rvh_delegate =
+      static_cast<RenderViewHostDelegate::BrowserIntegration*>(contents());
+
+  // Now let's simulate the evil page calling history.back().
+  rvh_delegate->GoToEntryAtOffset(-1);
+  // The pending RVH should be the one for the Google.
+  EXPECT_EQ(host1, contents()->render_manager()->pending_render_view_host());
+
+  // Before that RVH has committed, the evil page reloads itself.
+  ViewHostMsg_FrameNavigate_Params params;
+  params.page_id = 1;
+  params.url = url2;
+  params.transition = PageTransition::CLIENT_REDIRECT;
+  params.should_update_history = false;
+  params.gesture = NavigationGestureAuto;
+  params.was_within_same_page = false;
+  params.is_post = false;
+  contents()->TestDidNavigate(host2, params);
+
+  // That should have cancelled the pending RVH, and the evil RVH should be the
+  // current one.
+  EXPECT_TRUE(contents()->render_manager()->pending_render_view_host() == NULL);
+  EXPECT_EQ(host2, contents()->render_manager()->current_host());
+
+  // Also we should not have a pending navigation entry.
+  NavigationEntry* entry = contents()->controller().GetActiveEntry();
+  ASSERT_TRUE(entry != NULL);
+  EXPECT_EQ(url2, entry->url());
+}
--- a/src/chrome/browser/tab_contents/tab_contents.cc
+++ b/src/chrome/browser/tab_contents/tab_contents.cc
@@ -216,12 +216,12 @@ ViewMsg_Navigate_Params::NavigationType
   return ViewMsg_Navigate_Params::NORMAL;
 }
 
-void MakeNavigateParams(const NavigationController& controller,
+void MakeNavigateParams(const NavigationEntry& entry,
+                        const NavigationController& controller,
                         NavigationController::ReloadType reload_type,
                         ViewMsg_Navigate_Params* params) {
-  const NavigationEntry& entry = *controller.pending_entry();
   params->page_id = entry.page_id();
-  params->pending_history_list_offset = controller.pending_entry_index();
+  params->pending_history_list_offset = controller.GetIndexOfEntry(&entry);
   params->current_history_list_offset = controller.last_committed_entry_index();
   params->current_history_list_length = controller.entry_count();
   params->url = entry.url();
@@ -774,8 +774,12 @@ void TabContents::OpenURL(const GURL& ur
 
 bool TabContents::NavigateToPendingEntry(
     NavigationController::ReloadType reload_type) {
-  const NavigationEntry& entry = *controller_.pending_entry();
+  return NavigateToEntry(*controller_.pending_entry(), reload_type);
+}
 
+bool TabContents::NavigateToEntry(
+    const NavigationEntry& entry,
+    NavigationController::ReloadType reload_type) {
   RenderViewHost* dest_render_view_host = render_manager_.Navigate(entry);
   if (!dest_render_view_host)
     return false;  // Unable to create the desired render view host.
@@ -807,7 +811,7 @@ bool TabContents::NavigateToPendingEntry
 
   // Navigate in the desired RenderViewHost.
   ViewMsg_Navigate_Params navigate_params;
-  MakeNavigateParams(controller_, reload_type, &navigate_params);
+  MakeNavigateParams(entry, controller_, reload_type, &navigate_params);
   dest_render_view_host->Navigate(navigate_params);
 
   if (entry.page_id() == -1) {
@@ -1932,8 +1936,15 @@ void TabContents::OnFindReply(int reques
 }
 
 void TabContents::GoToEntryAtOffset(int offset) {
-  if (!delegate_ || delegate_->OnGoToEntryOffset(offset))
-    controller_.GoToOffset(offset);
+  if (!delegate_ || delegate_->OnGoToEntryOffset(offset)) {
+    NavigationEntry* entry = controller_.GetEntryAtOffset(offset);
+    if (!entry)
+      return;
+    // Note that we don't call NavigationController::GotToOffset() as we don't
+    // want to create a pending navigation entry (it might end up lingering
+    // http://crbug.com/51680).
+    NavigateToEntry(*entry, NavigationController::NO_RELOAD);
+  }
 }
 
 void TabContents::OnMissingPluginStatus(int status) {
--- a/src/chrome/browser/tab_contents/tab_contents.h
+++ b/src/chrome/browser/tab_contents/tab_contents.h
@@ -809,6 +809,12 @@ class TabContents : public PageNavigator
   // different and was therefore updated.
   bool UpdateTitleForEntry(NavigationEntry* entry, const std::wstring& title);
 
+  // Causes the TabContents to navigate in the right renderer to |entry|, which
+  // must be already part of the entries in the navigation controller.
+  // This does not change the NavigationController state.
+  bool NavigateToEntry(const NavigationEntry& entry,
+                       NavigationController::ReloadType reload_type);
+
   // Misc non-view stuff -------------------------------------------------------
 
   // Helper functions for sending notifications.
--- a/src/chrome/browser/tab_contents/test_tab_contents.cc
+++ b/src/chrome/browser/tab_contents/test_tab_contents.cc
@@ -42,7 +42,7 @@ void TestTabContents::Observe(Notificati
   }
 }
 
-TestRenderViewHost* TestTabContents::pending_rvh() {
+TestRenderViewHost* TestTabContents::pending_rvh() const {
   return static_cast<TestRenderViewHost*>(
       render_manager_.pending_render_view_host_);
 }
--- a/src/chrome/browser/tab_contents/test_tab_contents.h
+++ b/src/chrome/browser/tab_contents/test_tab_contents.h
@@ -20,7 +20,7 @@ class TestTabContents : public TabConten
   // The render view host factory will be passed on to the
   TestTabContents(Profile* profile, SiteInstance* instance);
 
-  TestRenderViewHost* pending_rvh();
+  TestRenderViewHost* pending_rvh() const;
 
   // State accessor.
   bool cross_navigation_pending() {
@@ -57,6 +57,15 @@ class TestTabContents : public TabConten
   // TestTabContents. The caller owns the returned object.
   virtual TabContents* Clone();
 
+  // Simulates the appropriate RenderView (pending if any, current otherwise)
+  // sending a navigate notification for the NavigationController pending entry.
+  void CommitPendingNavigation();
+
+  // Simulates the current RVH notifying that it has unloaded so that the
+  // pending RVH navigation can proceed.
+  // Does nothing if no cross-navigation is pending.
+  void ProceedWithCrossSiteNavigation();
+
   // Set by individual tests.
   bool transition_cross_site;
 
--- a/src/chrome/browser/translate/translate_manager_unittest.cc
+++ b/src/chrome/browser/translate/translate_manager_unittest.cc
@@ -7,6 +7,7 @@
 #include "base/utf_string_conversions.h"
 #include "chrome/app/chrome_dll_resource.h"
 #include "chrome/browser/renderer_host/mock_render_process_host.h"
+#include "chrome/browser/tab_contents/navigation_controller.h"
 #include "chrome/browser/tab_contents/render_view_context_menu.h"
 #include "chrome/browser/translate/translate_infobar_delegate.h"
 #include "chrome/browser/translate/translate_manager.h"
@@ -38,11 +39,13 @@ class TranslateManagerTest : public Rend
 
   // Simluates navigating to a page and getting the page contents and language
   // for that navigation.
-  void SimulateNavigation(const GURL& url, int page_id,
+  void SimulateNavigation(const GURL& url,
                           const std::string& contents,
                           const std::string& lang,
                           bool page_translatable) {
     NavigateAndCommit(url);
+    int page_id = RenderViewHostTestHarness::contents()->controller().
+        GetLastCommittedEntry()->page_id();
     SimulateOnPageContents(url, page_id, contents, lang, page_translatable);
   }
 
@@ -276,7 +279,7 @@ class TestRenderViewContextMenu : public
 
 TEST_F(TranslateManagerTest, NormalTranslate) {
   // Simulate navigating to a page.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // We should have an infobar.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -300,7 +303,6 @@ TEST_F(TranslateManagerTest, NormalTrans
   int page_id = 0;
   std::string original_lang, target_lang;
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(0, page_id);
   EXPECT_EQ("fr", original_lang);
   EXPECT_EQ("en", target_lang);
 
@@ -318,7 +320,6 @@ TEST_F(TranslateManagerTest, NormalTrans
   std::string new_original_lang = infobar->GetLanguageCodeAt(0);
   infobar->SetOriginalLanguage(0);
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(0, page_id);
   EXPECT_EQ(new_original_lang, original_lang);
   EXPECT_EQ("en", target_lang);
   // Simulate the render notifying the translation has been done.
@@ -334,7 +335,6 @@ TEST_F(TranslateManagerTest, NormalTrans
   std::string new_target_lang = infobar->GetLanguageCodeAt(1);
   infobar->SetTargetLanguage(1);
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(0, page_id);
   EXPECT_EQ(new_original_lang, original_lang);
   EXPECT_EQ(new_target_lang, target_lang);
   // Simulate the render notifying the translation has been done.
@@ -347,7 +347,7 @@ TEST_F(TranslateManagerTest, NormalTrans
 
 TEST_F(TranslateManagerTest, TranslateScriptNotAvailable) {
   // Simulate navigating to a page.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // We should have an infobar.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -374,7 +374,7 @@ TEST_F(TranslateManagerTest, TranslateSc
 TEST_F(TranslateManagerTest, TranslateUnknownLanguage) {
   // Simulate navigating to a page ("und" is the string returned by the CLD for
   // languages it does not recognize).
-  SimulateNavigation(GURL("http://www.google.mys"), 0, "G00g1e", "und", true);
+  SimulateNavigation(GURL("http://www.google.mys"), "G00g1e", "und", true);
 
   // We should not have an infobar as we don't know the language.
   ASSERT_TRUE(GetTranslateInfoBar() == NULL);
@@ -408,8 +408,7 @@ TEST_F(TranslateManagerTest, TranslateUn
 
   // Let's run the same steps but this time the server detects the page is
   // already in English.
-  SimulateNavigation(GURL("http://www.google.com"), 1, "The Google", "und",
-                     true);
+  SimulateNavigation(GURL("http://www.google.com"), "The Google", "und", true);
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
   menu->ExecuteCommand(IDC_CONTENT_CONTEXT_TRANSLATE);
@@ -422,8 +421,7 @@ TEST_F(TranslateManagerTest, TranslateUn
 
   // Let's run the same steps again but this time the server fails to detect the
   // page's language (it returns an empty string).
-  SimulateNavigation(GURL("http://www.google.com"), 2, "The Google", "und",
-                     true);
+  SimulateNavigation(GURL("http://www.google.com"), "The Google", "und", true);
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
   menu->ExecuteCommand(IDC_CONTENT_CONTEXT_TRANSLATE);
@@ -508,7 +506,7 @@ TEST_F(TranslateManagerTest, TestAllLang
 // Tests auto-translate on page.
 TEST_F(TranslateManagerTest, AutoTranslateOnNavigate) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Simulate the user translating.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -521,7 +519,7 @@ TEST_F(TranslateManagerTest, AutoTransla
 
   // Now navigate to a new page in the same language.
   process()->sink().ClearMessages();
-  SimulateNavigation(GURL("http://news.google.fr"), 1, "Les news", "fr", true);
+  SimulateNavigation(GURL("http://news.google.fr"), "Les news", "fr", true);
 
   // This should have automatically triggered a translation.
   int page_id = 0;
@@ -533,7 +531,7 @@ TEST_F(TranslateManagerTest, AutoTransla
 
   // Now navigate to a page in a different language.
   process()->sink().ClearMessages();
-  SimulateNavigation(GURL("http://news.google.es"), 1, "Las news", "es", true);
+  SimulateNavigation(GURL("http://news.google.es"), "Las news", "es", true);
 
   // This should not have triggered a translate.
   EXPECT_FALSE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
@@ -542,7 +540,7 @@ TEST_F(TranslateManagerTest, AutoTransla
 // Tests that multiple OnPageContents do not cause multiple infobars.
 TEST_F(TranslateManagerTest, MultipleOnPageContents) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Simulate clicking 'Nope' (don't translate).
   EXPECT_TRUE(DenyTranslation());
@@ -554,7 +552,7 @@ TEST_F(TranslateManagerTest, MultipleOnP
   EXPECT_EQ(0, contents()->infobar_delegate_count());
 
   // Do the same steps but simulate closing the infobar this time.
-  SimulateNavigation(GURL("http://www.youtube.fr"), 1, "Le YouTube", "fr",
+  SimulateNavigation(GURL("http://www.youtube.fr"), "Le YouTube", "fr",
                      true);
   EXPECT_TRUE(CloseTranslateInfoBar());
   EXPECT_EQ(0, contents()->infobar_delegate_count());
@@ -566,7 +564,7 @@ TEST_F(TranslateManagerTest, MultipleOnP
 // Test that reloading the page brings back the infobar.
 TEST_F(TranslateManagerTest, Reload) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Close the infobar.
   EXPECT_TRUE(CloseTranslateInfoBar());
@@ -593,7 +591,7 @@ TEST_F(TranslateManagerTest, ReloadFromL
   GURL url("http://www.google.fr");
 
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(url, 0, "Le Google", "fr", true);
+  SimulateNavigation(url, "Le Google", "fr", true);
 
   // Close the infobar.
   EXPECT_TRUE(CloseTranslateInfoBar());
@@ -621,18 +619,18 @@ TEST_F(TranslateManagerTest, ReloadFromL
 // in-page.
 TEST_F(TranslateManagerTest, CloseInfoBarInPageNavigation) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Close the infobar.
   EXPECT_TRUE(CloseTranslateInfoBar());
 
   // Navigate in page, no infobar should be shown.
-  SimulateNavigation(GURL("http://www.google.fr/#ref1"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/#ref1"), "Le Google", "fr",
                      true);
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
 
   // Navigate out of page, a new infobar should show.
-  SimulateNavigation(GURL("http://www.google.fr/foot"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/foot"), "Le Google", "fr",
                      true);
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
 }
@@ -640,18 +638,18 @@ TEST_F(TranslateManagerTest, CloseInfoBa
 // Tests that denying translation is sticky when navigating in page.
 TEST_F(TranslateManagerTest, DenyTranslateInPageNavigation) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Simulate clicking 'Nope' (don't translate).
   EXPECT_TRUE(DenyTranslation());
 
   // Navigate in page, no infobar should be shown.
-  SimulateNavigation(GURL("http://www.google.fr/#ref1"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/#ref1"), "Le Google", "fr",
                      true);
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
 
   // Navigate out of page, a new infobar should show.
-  SimulateNavigation(GURL("http://www.google.fr/foot"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/foot"), "Le Google", "fr",
                      true);
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
 }
@@ -660,7 +658,7 @@ TEST_F(TranslateManagerTest, DenyTransla
 // return when navigating in page.
 TEST_F(TranslateManagerTest, TranslateCloseInfoBarInPageNavigation) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Simulate the user translating.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -674,7 +672,7 @@ TEST_F(TranslateManagerTest, TranslateCl
   EXPECT_TRUE(CloseTranslateInfoBar());
 
   // Navigate in page, no infobar should be shown.
-  SimulateNavigation(GURL("http://www.google.fr/#ref1"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/#ref1"), "Le Google", "fr",
                      true);
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
 
@@ -682,7 +680,7 @@ TEST_F(TranslateManagerTest, TranslateCl
   // Note that we navigate to a page in a different language so we don't trigger
   // the auto-translate feature (it would translate the page automatically and
   // the before translate inforbar would not be shown).
-  SimulateNavigation(GURL("http://www.google.de"), 0, "Das Google", "de", true);
+  SimulateNavigation(GURL("http://www.google.de"), "Das Google", "de", true);
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
 }
 
@@ -690,7 +688,7 @@ TEST_F(TranslateManagerTest, TranslateCl
 // in-page.
 TEST_F(TranslateManagerTest, TranslateInPageNavigation) {
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // Simulate the user translating.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -705,7 +703,7 @@ TEST_F(TranslateManagerTest, TranslateIn
 
   // Navigate in page, the same infobar should still be shown.
   ClearRemovedInfoBars();
-  SimulateNavigation(GURL("http://www.google.fr/#ref1"), 0, "Le Google", "fr",
+  SimulateNavigation(GURL("http://www.google.fr/#ref1"), "Le Google", "fr",
                      true);
   EXPECT_FALSE(InfoBarRemoved());
   EXPECT_EQ(infobar, GetTranslateInfoBar());
@@ -713,7 +711,7 @@ TEST_F(TranslateManagerTest, TranslateIn
   // Navigate out of page, a new infobar should show.
   // See note in TranslateCloseInfoBarInPageNavigation test on why it is
   // important to navigate to a page in a different language for this test.
-  SimulateNavigation(GURL("http://www.google.de"), 0, "Das Google", "de", true);
+  SimulateNavigation(GURL("http://www.google.de"), "Das Google", "de", true);
   // The old infobar is gone.
   EXPECT_TRUE(CheckInfoBarRemovedAndReset(infobar));
   // And there is a new one.
@@ -724,7 +722,7 @@ TEST_F(TranslateManagerTest, TranslateIn
 // unsupported language.
 TEST_F(TranslateManagerTest, CLDReportsUnsupportedPageLanguage) {
   // Simulate navigating to a page and getting an unsupported language.
-  SimulateNavigation(GURL("http://www.google.com"), 0, "Google", "qbz", true);
+  SimulateNavigation(GURL("http://www.google.com"), "Google", "qbz", true);
 
   // No info-bar should be shown.
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
@@ -735,8 +733,7 @@ TEST_F(TranslateManagerTest, CLDReportsU
 // The translation server might return a language we don't support.
 TEST_F(TranslateManagerTest, ServerReportsUnsupportedLanguage) {
   // Simulate navigating to a page and translating it.
-  SimulateNavigation(GURL("http://mail.google.fr"), 0, "Le Google", "fr",
-                     true);
+  SimulateNavigation(GURL("http://mail.google.fr"), "Le Google", "fr", true);
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
   process()->sink().ClearMessages();
@@ -776,7 +773,7 @@ TEST_F(TranslateManagerTest, Unsupported
 
   // Simulate navigating to a page in a language supported by the translate
   // server.
-  SimulateNavigation(GURL("http://www.google.com"), 0, "Google", "en", true);
+  SimulateNavigation(GURL("http://www.google.com"), "Google", "en", true);
 
   // No info-bar should be shown.
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
@@ -791,7 +788,7 @@ TEST_F(TranslateManagerTest, TranslateEn
   prefs->SetBoolean(prefs::kEnableTranslate, true);
 
   // Simulate navigating to a page and getting its language.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // An infobar should be shown.
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
@@ -817,7 +814,7 @@ TEST_F(TranslateManagerTest, TranslateEn
 TEST_F(TranslateManagerTest, NeverTranslateLanguagePref) {
   // Simulate navigating to a page and getting its language.
   GURL url("http://www.google.fr");
-  SimulateNavigation(url, 0, "Le Google", "fr", true);
+  SimulateNavigation(url, "Le Google", "fr", true);
 
   // An infobar should be shown.
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
@@ -838,8 +835,7 @@ TEST_F(TranslateManagerTest, NeverTransl
   EXPECT_TRUE(CloseTranslateInfoBar());
 
   // Navigate to a new page also in French.
-  SimulateNavigation(GURL("http://wwww.youtube.fr"), 1, "Le YouTube", "fr",
-                     true);
+  SimulateNavigation(GURL("http://wwww.youtube.fr"), "Le YouTube", "fr", true);
 
   // There should not be a translate infobar.
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
@@ -851,7 +847,7 @@ TEST_F(TranslateManagerTest, NeverTransl
   EXPECT_TRUE(translate_prefs.CanTranslate(prefs, "fr", url));
 
   // Navigate to a page in French.
-  SimulateNavigation(url, 2, "Le Google", "fr", true);
+  SimulateNavigation(url, "Le Google", "fr", true);
 
   // There should be a translate infobar.
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
@@ -864,7 +860,7 @@ TEST_F(TranslateManagerTest, NeverTransl
   // Simulate navigating to a page and getting its language.
   GURL url("http://www.google.fr");
   std::string host(url.host());
-  SimulateNavigation(url, 0, "Le Google", "fr", true);
+  SimulateNavigation(url, "Le Google", "fr", true);
 
   // An infobar should be shown.
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
@@ -885,8 +881,7 @@ TEST_F(TranslateManagerTest, NeverTransl
   EXPECT_TRUE(CloseTranslateInfoBar());
 
   // Navigate to a new page also on the same site.
-  SimulateNavigation(GURL("http://www.google.fr/hello"), 1, "Bonjour", "fr",
-                     true);
+  SimulateNavigation(GURL("http://www.google.fr/hello"), "Bonjour", "fr", true);
 
   // There should not be a translate infobar.
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
@@ -898,7 +893,7 @@ TEST_F(TranslateManagerTest, NeverTransl
   EXPECT_TRUE(translate_prefs.CanTranslate(prefs, "fr", url));
 
   // Navigate to a page in French.
-  SimulateNavigation(url, 0, "Le Google", "fr", true);
+  SimulateNavigation(url, "Le Google", "fr", true);
 
   // There should be a translate infobar.
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
@@ -917,7 +912,7 @@ TEST_F(TranslateManagerTest, AlwaysTrans
   translate_prefs.WhitelistLanguagePair("fr", "en");
 
   // Load a page in French.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
 
   // It should have triggered an automatic translation to English.
 
@@ -930,13 +925,12 @@ TEST_F(TranslateManagerTest, AlwaysTrans
   int page_id = 0;
   std::string original_lang, target_lang;
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(0, page_id);
   EXPECT_EQ("fr", original_lang);
   EXPECT_EQ("en", target_lang);
   process()->sink().ClearMessages();
 
   // Try another language, it should not be autotranslated.
-  SimulateNavigation(GURL("http://www.google.es"), 1, "El Google", "es", true);
+  SimulateNavigation(GURL("http://www.google.es"), "El Google", "es", true);
   EXPECT_FALSE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
   EXPECT_TRUE(CloseTranslateInfoBar());
@@ -946,8 +940,7 @@ TEST_F(TranslateManagerTest, AlwaysTrans
   TestingProfile* test_profile =
       static_cast<TestingProfile*>(contents()->profile());
   test_profile->set_off_the_record(true);
-  SimulateNavigation(GURL("http://www.youtube.fr"), 2, "Le YouTube", "fr",
-                     true);
+  SimulateNavigation(GURL("http://www.youtube.fr"), "Le YouTube", "fr", true);
   EXPECT_FALSE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
   EXPECT_TRUE(GetTranslateInfoBar() != NULL);
   EXPECT_TRUE(CloseTranslateInfoBar());
@@ -957,7 +950,7 @@ TEST_F(TranslateManagerTest, AlwaysTrans
   // behavior, which is show a "before translate" infobar.
   SetPrefObserverExpectation(TranslatePrefs::kPrefTranslateWhitelists);
   translate_prefs.RemoveLanguagePairFromWhitelist("fr", "en");
-  SimulateNavigation(GURL("http://www.google.fr"), 3, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
   EXPECT_FALSE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
   infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
@@ -1004,7 +997,6 @@ TEST_F(TranslateManagerTest, ContextMenu
   int page_id = 0;
   std::string original_lang, target_lang;
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(0, page_id);
   EXPECT_EQ("fr", original_lang);
   EXPECT_EQ("en", target_lang);
   process()->sink().ClearMessages();
@@ -1026,12 +1018,11 @@ TEST_F(TranslateManagerTest, ContextMenu
   // Test that selecting translate in the context menu WHILE the page is being
   // translated does nothing (this could happen if autotranslate kicks-in and
   // the user selects the menu while the translation is being performed).
-  SimulateNavigation(GURL("http://www.google.es"), 1, "El Google", "es", true);
+  SimulateNavigation(GURL("http://www.google.es"), "El Google", "es", true);
   infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
   infobar->Translate();
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(1, page_id);
   process()->sink().ClearMessages();
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
@@ -1042,12 +1033,11 @@ TEST_F(TranslateManagerTest, ContextMenu
 
   // Now test that selecting translate in the context menu AFTER the page has
   // been translated does nothing.
-  SimulateNavigation(GURL("http://www.google.de"), 2, "Das Google", "de", true);
+  SimulateNavigation(GURL("http://www.google.de"), "Das Google", "de", true);
   infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
   infobar->Translate();
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(2, page_id);
   process()->sink().ClearMessages();
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
@@ -1060,7 +1050,7 @@ TEST_F(TranslateManagerTest, ContextMenu
 
   // Test that the translate context menu is disabled when the page is in the
   // same language as the UI.
-  SimulateNavigation(url, 0, "Google", "en", true);
+  SimulateNavigation(url, "Google", "en", true);
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
   EXPECT_TRUE(menu->IsItemPresent(IDC_CONTENT_CONTEXT_TRANSLATE));
@@ -1068,7 +1058,7 @@ TEST_F(TranslateManagerTest, ContextMenu
 
   // Test that the translate context menu is enabled when the page is in an
   // unknown language.
-  SimulateNavigation(url, 0, "G00g1e", "und", true);
+  SimulateNavigation(url, "G00g1e", "und", true);
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
   EXPECT_TRUE(menu->IsItemPresent(IDC_CONTENT_CONTEXT_TRANSLATE));
@@ -1076,7 +1066,7 @@ TEST_F(TranslateManagerTest, ContextMenu
 
   // Test that the translate context menu is disabled when the page is in an
   // unsupported language.
-  SimulateNavigation(url, 0, "G00g1e", "qbz", true);
+  SimulateNavigation(url, "G00g1e", "qbz", true);
   menu.reset(TestRenderViewContextMenu::CreateContextMenu(contents()));
   menu->Init();
   EXPECT_TRUE(menu->IsItemPresent(IDC_CONTENT_CONTEXT_TRANSLATE));
@@ -1102,8 +1092,7 @@ TEST_F(TranslateManagerTest, BeforeTrans
   for (int i = 0; i < 8; ++i) {
     SCOPED_TRACE(::testing::Message::Message() << "Iteration " << i <<
         " incognito mode=" << test_profile->IsOffTheRecord());
-    SimulateNavigation(GURL("http://www.google.fr"), 1, "Le Google", "fr",
-                       true);
+    SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
     infobar = GetTranslateInfoBar();
     ASSERT_TRUE(infobar != NULL);
     EXPECT_EQ(TranslateInfoBarDelegate::BEFORE_TRANSLATE, infobar->type());
@@ -1135,8 +1124,7 @@ TEST_F(TranslateManagerTest, BeforeTrans
   for (int i = 0; i < 8; ++i) {
     SCOPED_TRACE(::testing::Message::Message() << "Iteration " << i <<
         " incognito mode=" << test_profile->IsOffTheRecord());
-    SimulateNavigation(GURL("http://www.google.de"), 1, "Das Google", "de",
-                       true);
+    SimulateNavigation(GURL("http://www.google.de"), "Das Google", "de", true);
     infobar = GetTranslateInfoBar();
     ASSERT_TRUE(infobar != NULL);
     EXPECT_EQ(TranslateInfoBarDelegate::BEFORE_TRANSLATE, infobar->type());
@@ -1162,8 +1150,7 @@ TEST_F(TranslateManagerTest, BeforeTrans
 // should not be translated.
 TEST_F(TranslateManagerTest, NonTranslatablePage) {
   // Simulate navigating to a page.
-  SimulateNavigation(GURL("http://mail.google.fr"), 0, "Le Google", "fr",
-                     false);
+  SimulateNavigation(GURL("http://mail.google.fr"), "Le Google", "fr", false);
 
   // We should not have an infobar.
   EXPECT_TRUE(GetTranslateInfoBar() == NULL);
@@ -1181,7 +1168,7 @@ TEST_F(TranslateManagerTest, ScriptExpir
   ExpireTranslateScriptImmediately();
 
   // Simulate navigating to a page and translating it.
-  SimulateNavigation(GURL("http://www.google.fr"), 0, "Le Google", "fr", true);
+  SimulateNavigation(GURL("http://www.google.fr"), "Le Google", "fr", true);
   TranslateInfoBarDelegate* infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
   process()->sink().ClearMessages();
@@ -1194,7 +1181,7 @@ TEST_F(TranslateManagerTest, ScriptExpir
   MessageLoop::current()->RunAllPending();
 
   // Do another navigation and translation.
-  SimulateNavigation(GURL("http://www.google.es"), 1, "El Google", "es", true);
+  SimulateNavigation(GURL("http://www.google.es"), "El Google", "es", true);
   infobar = GetTranslateInfoBar();
   ASSERT_TRUE(infobar != NULL);
   process()->sink().ClearMessages();
@@ -1210,7 +1197,6 @@ TEST_F(TranslateManagerTest, ScriptExpir
   int page_id = 0;
   std::string original_lang, target_lang;
   EXPECT_TRUE(GetTranslateMessage(&page_id, &original_lang, &target_lang));
-  EXPECT_EQ(1, page_id);
   EXPECT_EQ("es", original_lang);
   EXPECT_EQ("en", target_lang);
 }
