--- a/src/third_party/WebKit/WebCore/loader/EmptyClients.h
+++ b/src/third_party/WebKit/WebCore/loader/EmptyClients.h
@@ -61,6 +61,7 @@ public:
     virtual ~EmptyChromeClient() { }
     virtual void chromeDestroyed() { }
 
+    virtual void* webView() const { return 0; }
     virtual void setWindowRect(const FloatRect&) { }
     virtual FloatRect windowRect() { return FloatRect(); }
 
--- a/src/third_party/WebKit/WebCore/page/ChromeClient.h
+++ b/src/third_party/WebKit/WebCore/page/ChromeClient.h
@@ -131,6 +131,8 @@ namespace WebCore {
         virtual void invalidateWindow(const IntRect&, bool) = 0;
         virtual void invalidateContentsAndWindow(const IntRect&, bool) = 0;
         virtual void invalidateContentsForSlowScroll(const IntRect&, bool) = 0;
+        virtual void* webView() const = 0;
+
         virtual void scroll(const IntSize&, const IntRect&, const IntRect&) = 0;
         virtual IntPoint screenToWindow(const IntPoint&) const = 0;
         virtual IntRect windowToScreen(const IntRect&) const = 0;
--- a/src/third_party/WebKit/WebCore/page/brew/ChromeClientBrew.h
+++ b/src/third_party/WebKit/WebCore/page/brew/ChromeClientBrew.h
@@ -42,6 +42,7 @@ class PopupMenuClient;
 // things here that don't make sense for other ports.
 class ChromeClientBrew : public ChromeClient {
 public:
+    virtual void* webView() const { return 0; }
     virtual void createSelectPopup(PopupMenuClient*, int selected, const IntRect& rect) = 0;
     virtual bool destroySelectPopup() = 0;
 };
--- a/src/third_party/WebKit/WebKit/chromium/src/AutoFillPopupMenuClient.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/AutoFillPopupMenuClient.cpp
@@ -346,7 +346,7 @@ WebViewImpl* AutoFillPopupMenuClient::ge
     if (!page)
         return 0;
 
-    return static_cast<ChromeClientImpl*>(page->chrome()->client())->webView();
+    return static_cast<WebViewImpl*>(page->chrome()->client()->webView());
 }
 
 RenderStyle* AutoFillPopupMenuClient::textFieldStyle() const
--- a/src/third_party/WebKit/WebKit/chromium/src/ChromeClientImpl.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/ChromeClientImpl.cpp
@@ -113,6 +113,11 @@ ChromeClientImpl::~ChromeClientImpl()
 {
 }
 
+void* ChromeClientImpl::webView() const
+{
+    return static_cast<void*>(m_webView);
+}
+
 void ChromeClientImpl::chromeDestroyed()
 {
     // Our lifetime is bound to the WebViewImpl.
@@ -641,6 +646,11 @@ void ChromeClientImpl::popupClosed(WebCo
     m_webView->popupClosed(popupContainer);
 }
 
+void ChromeClientImpl::setCursor(const WebCore::Cursor& cursor)
+{
+    setCursor(WebCursorInfo(cursor));
+}
+
 void ChromeClientImpl::setCursor(const WebCursorInfo& cursor)
 {
     if (m_webView->client())
--- a/src/third_party/WebKit/WebKit/chromium/src/ChromeClientImpl.h
+++ b/src/third_party/WebKit/WebKit/chromium/src/ChromeClientImpl.h
@@ -53,7 +53,7 @@ public:
     explicit ChromeClientImpl(WebViewImpl* webView);
     virtual ~ChromeClientImpl();
 
-    WebViewImpl* webView() const { return m_webView; }
+    virtual void* webView() const;
 
     // ChromeClient methods:
     virtual void chromeDestroyed();
@@ -126,7 +126,7 @@ public:
     virtual void cancelGeolocationPermissionRequestForFrame(WebCore::Frame*, WebCore::Geolocation*);
     virtual void runOpenPanel(WebCore::Frame*, PassRefPtr<WebCore::FileChooser>);
     virtual void chooseIconForFiles(const Vector<WebCore::String>&, WebCore::FileChooser*);
-    virtual void setCursor(const WebCore::Cursor&) { }
+    virtual void setCursor(const WebCore::Cursor&);
     virtual void formStateDidChange(const WebCore::Node*);
     virtual PassOwnPtr<WebCore::HTMLParserQuirks> createHTMLParserQuirks() { return 0; }
 #if ENABLE(TOUCH_EVENTS)
@@ -162,11 +162,11 @@ public:
     virtual void didChangeAccessibilityObjectState(WebCore::AccessibilityObject*);
 
     // ChromeClientImpl:
-    void setCursor(const WebCursorInfo& cursor);
-    void setCursorForPlugin(const WebCursorInfo& cursor);
+    void setCursorForPlugin(const WebCursorInfo&);
 
 private:
     void getPopupMenuInfo(WebCore::PopupContainer*, WebPopupMenuInfo*);
+    void setCursor(const WebCursorInfo&);
 
     WebViewImpl* m_webView;  // weak pointer
     bool m_toolbarsVisible;
--- a/src/third_party/WebKit/WebKit/chromium/src/StorageNamespaceProxy.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/StorageNamespaceProxy.cpp
@@ -49,8 +49,7 @@ PassRefPtr<StorageNamespace> StorageName
 
 PassRefPtr<StorageNamespace> StorageNamespace::sessionStorageNamespace(Page* page, unsigned quota)
 {
-    WebKit::ChromeClientImpl* chromeClientImpl = static_cast<WebKit::ChromeClientImpl*>(page->chrome()->client());
-    WebKit::WebViewClient* webViewClient = chromeClientImpl->webView()->client();
+    WebKit::WebViewClient* webViewClient = static_cast<WebKit::WebViewImpl*>(page->chrome()->client()->webView())->client();
     return adoptRef(new StorageNamespaceProxy(webViewClient->createSessionStorageNamespace(quota), SessionStorage));
 }
 
--- a/src/third_party/WebKit/WebKit/chromium/src/WebViewImpl.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/WebViewImpl.cpp
@@ -851,7 +851,8 @@ WebViewImpl* WebViewImpl::fromPage(Page*
     if (!page)
         return 0;
 
-    return static_cast<ChromeClientImpl*>(page->chrome()->client())->webView();
+    ChromeClientImpl* chromeClient = static_cast<ChromeClientImpl*>(page->chrome()->client());
+    return static_cast<WebViewImpl*>(chromeClient->webView());
 }
 
 // WebWidget ------------------------------------------------------------------
--- a/src/third_party/WebKit/WebKit/chromium/src/GraphicsContext3D.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/GraphicsContext3D.cpp
@@ -311,6 +311,7 @@ public:
 
 private:
     OwnPtr<WebKit::WebGraphicsContext3D> m_impl;
+    WebKit::WebViewImpl* m_webViewImpl;
 #if USE(ACCELERATED_COMPOSITING)
     RefPtr<WebGLLayerChromium> m_compositingLayer;
 #endif
@@ -329,9 +330,10 @@ private:
 };
 
 GraphicsContext3DInternal::GraphicsContext3DInternal()
+    : m_webViewImpl(0)
 #if PLATFORM(SKIA)
 #elif PLATFORM(CG)
-    : m_renderOutput(0)
+    , m_renderOutput(0)
 #else
 #error Must port to your platform
 #endif
@@ -360,13 +362,11 @@ bool GraphicsContext3DInternal::initiali
         return false;
 
     Chrome* chrome = static_cast<Chrome*>(hostWindow);
-    WebKit::ChromeClientImpl* chromeClientImpl = static_cast<WebKit::ChromeClientImpl*>(chrome->client());
+    m_webViewImpl = static_cast<WebKit::WebViewImpl*>(chrome->client()->webView());
 
-    WebKit::WebViewImpl* webView = chromeClientImpl->webView();
-
-    if (!webView)
+    if (!m_webViewImpl)
         return false;
-    if (!webContext->initialize(webAttributes, webView)) {
+    if (!webContext->initialize(webAttributes, m_webViewImpl)) {
         delete webContext;
         return false;
     }
@@ -461,6 +461,10 @@ void GraphicsContext3DInternal::paintRen
 
 void GraphicsContext3DInternal::beginPaint(WebGLRenderingContext* context)
 {
+    // If the gpu compositor is on then skip the readback and software rendering path.
+    if (m_webViewImpl->isAcceleratedCompositingActive())
+        return;
+
     paintRenderingResultsToCanvas(context);
 }
 
--- a/src/third_party/WebKit/WebKit/chromium/src/ChromiumBridge.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/ChromiumBridge.cpp
@@ -38,7 +38,6 @@
 #include "WebClipboard.h"
 #include "WebCookie.h"
 #include "WebCookieJar.h"
-#include "WebCursorInfo.h"
 #include "WebData.h"
 #include "WebDragData.h"
 #include "WebFileSystem.h"
@@ -93,7 +92,7 @@ using namespace WebKit;
 
 namespace WebCore {
 
-static ChromeClientImpl* toChromeClientImpl(Widget* widget)
+static WebWidgetClient* toWebWidgetClient(Widget* widget)
 {
     if (!widget)
         return 0;
@@ -110,15 +109,11 @@ static ChromeClientImpl* toChromeClientI
     if (!page)
         return 0;
 
-    return static_cast<ChromeClientImpl*>(page->chrome()->client());
-}
-
-static WebWidgetClient* toWebWidgetClient(Widget* widget)
-{
-    ChromeClientImpl* chromeClientImpl = toChromeClientImpl(widget);
-    if (!chromeClientImpl || !chromeClientImpl->webView())
+    void* webView = page->chrome()->client()->webView();
+    if (!webView)
         return 0;
-    return chromeClientImpl->webView()->client();
+
+    return static_cast<WebViewImpl*>(webView)->client();
 }
 
 static WebCookieJar* getCookieJar(const Document* document)
@@ -857,20 +852,6 @@ bool ChromiumBridge::popupsAllowed(NPP n
     return false;
 }
 
-void ChromiumBridge::widgetSetCursor(Widget* widget, const Cursor& cursor)
-{
-    ChromeClientImpl* client = toChromeClientImpl(widget);
-    if (client)
-        client->setCursor(WebCursorInfo(cursor));
-}
-
-void ChromiumBridge::widgetSetFocus(Widget* widget)
-{
-    ChromeClientImpl* client = toChromeClientImpl(widget);
-    if (client)
-        client->focus();
-}
-
 WorkerContextProxy* WorkerContextProxy::create(Worker* worker)
 {
     return WebWorkerClientImpl::createWorkerContextProxy(worker);
--- a/src/third_party/WebKit/WebCore/platform/chromium/ChromiumBridge.h
+++ b/src/third_party/WebKit/WebCore/platform/chromium/ChromiumBridge.h
@@ -259,10 +259,6 @@ namespace WebCore {
         static LinkHash visitedLinkHash(const UChar* url, unsigned length);
         static LinkHash visitedLinkHash(const KURL& base, const AtomicString& attributeURL);
         static bool isLinkVisited(LinkHash);
-
-        // Widget -------------------------------------------------------------
-        static void widgetSetCursor(Widget*, const Cursor&);
-        static void widgetSetFocus(Widget*);
     };
 
 } // namespace WebCore
--- a/src/third_party/WebKit/WebCore/platform/chromium/WidgetChromium.cpp
+++ b/src/third_party/WebKit/WebCore/platform/chromium/WidgetChromium.cpp
@@ -32,7 +32,8 @@
 #include "Widget.h"
 
 #include "Assertions.h"
-#include "ChromiumBridge.h"
+#include "HostWindow.h"
+#include "ScrollView.h"
 
 namespace WebCore {
 
@@ -56,7 +57,9 @@ void Widget::hide()
 
 void Widget::setCursor(const Cursor& cursor)
 {
-    ChromiumBridge::widgetSetCursor(this, cursor);
+    ScrollView* view = root();
+    if (view)
+        view->hostWindow()->setCursor(cursor);
 }
 
 void Widget::paint(GraphicsContext*, const IntRect&)
@@ -65,8 +68,6 @@ void Widget::paint(GraphicsContext*, con
 
 void Widget::setFocus(bool focused)
 {
-    if (focused)
-        ChromiumBridge::widgetSetFocus(this);
 }
 
 void Widget::setIsSelected(bool)
--- a/src/third_party/WebKit/WebKit/chromium/src/WebGeolocationServiceBridgeImpl.cpp
+++ b/src/third_party/WebKit/WebKit/chromium/src/WebGeolocationServiceBridgeImpl.cpp
@@ -153,8 +153,7 @@ void WebGeolocationServiceBridgeImpl::at
     Frame* frame = m_geolocationServiceChromium->frame();
     if (!frame || !frame->page())
         return;
-    WebKit::ChromeClientImpl* chromeClientImpl = static_cast<WebKit::ChromeClientImpl*>(frame->page()->chrome()->client());
-    WebKit::WebViewClient* webViewClient = chromeClientImpl->webView()->client();
+    WebKit::WebViewClient* webViewClient = static_cast<WebKit::WebViewImpl*>(frame->page()->chrome()->client()->webView())->client();
     m_webGeolocationService = webViewClient->geolocationService();
     ASSERT(m_webGeolocationService);
     m_bridgeId = m_webGeolocationService->attachBridge(this);
