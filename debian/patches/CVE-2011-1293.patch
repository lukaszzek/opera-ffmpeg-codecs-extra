--- a/src/third_party/WebKit/WebCore/dom/Document.cpp
+++ b/src/third_party/WebKit/WebCore/dom/Document.cpp
@@ -355,9 +355,11 @@ private:
     Document* m_document;
 };
 
+uint64_t Document::s_globalTreeVersion = 0;
+
 Document::Document(Frame* frame, const KURL& url, bool isXHTML, bool isHTML)
     : ContainerNode(0)
-    , m_domtree_version(0)
+    , m_domTreeVersion(++s_globalTreeVersion)
     , m_styleSheets(StyleSheetList::create(this))
     , m_styleRecalcTimer(this, &Document::styleRecalcTimerFired)
     , m_frameElementsShouldIgnoreScrolling(false)
--- a/src/third_party/WebKit/WebCore/dom/Document.h
+++ b/src/third_party/WebKit/WebCore/dom/Document.h
@@ -849,8 +849,8 @@ public:
     XBLBindingManager* bindingManager() const { return m_bindingManager.get(); }
 #endif
 
-    void incDOMTreeVersion() { ++m_domtree_version; }
-    unsigned domTreeVersion() const { return m_domtree_version; }
+    void incDOMTreeVersion() { m_domTreeVersion = ++s_globalTreeVersion; }
+    uint64_t domTreeVersion() const { return m_domTreeVersion; }
 
     void setDocType(PassRefPtr<DocumentType>);
 
@@ -1112,7 +1112,8 @@ private:
     RefPtr<Node> m_activeNode;
     mutable RefPtr<Element> m_documentElement;
 
-    unsigned m_domtree_version;
+    uint64_t m_domTreeVersion;
+    static uint64_t s_globalTreeVersion;
     
     HashSet<NodeIterator*> m_nodeIterators;
     HashSet<Range*> m_ranges;
--- a/src/third_party/WebKit/WebCore/dom/Node.cpp
+++ b/src/third_party/WebKit/WebCore/dom/Node.cpp
@@ -1208,6 +1208,14 @@ void Node::checkAddChild(Node *newChild,
             }
         }
     }
+
+    // If an element is moved from a document and then eventually back again the collection cache for
+    // that element may contain stale data as changes made to it will have updated the DOMTreeVersion
+    // of the document it was moved to. By increasing the DOMTreeVersion of the donating document here
+    // we ensure that the collection cache will be invalidated as needed when the element is moved back.
+    if (this->document())
+        this->document()->incDOMTreeVersion();
+
     
     // change the document pointer of newChild and all of its children to be the new document
     if (shouldAdoptChild)
--- a/src/third_party/WebKit/WebCore/html/HTMLCollection.cpp
+++ b/src/third_party/WebKit/WebCore/html/HTMLCollection.cpp
@@ -67,7 +67,7 @@ HTMLCollection::~HTMLCollection()
 
 void HTMLCollection::resetCollectionInfo() const
 {
-    unsigned docversion = static_cast<HTMLDocument*>(m_base->document())->domTreeVersion();
+    uint64_t docversion = static_cast<HTMLDocument*>(m_base->document())->domTreeVersion();
 
     if (!m_info) {
         m_info = new CollectionCache;
--- a/src/third_party/WebKit/WebCore/xml/XPathResult.h
+++ b/src/third_party/WebKit/WebCore/xml/XPathResult.h
@@ -80,7 +80,7 @@ namespace WebCore {
         XPath::NodeSet m_nodeSet; // FIXME: why duplicate the node set stored in m_value?
         unsigned short m_resultType;
         RefPtr<Document> m_document;
-        unsigned m_domTreeVersion;
+        uint64_t m_domTreeVersion;
     };
 
 } // namespace WebCore
